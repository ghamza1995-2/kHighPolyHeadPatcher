using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using Noggog;
using Reloaded.Memory.Extensions;
using Mutagen.Bethesda.Plugins.Order;

namespace kHighPolyHeadPatcher
{
    public class Program
    {
        private static readonly ModKey HPHModKey = ModKey.FromNameAndExtension("High Poly Head.esm");
        private static readonly string HPHHeadpartPrefix = "00KLH_";
        private static Lazy<Settings> _lazySettings = null!;
        public static Settings Settings => _lazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "Settings.json",
                    out _lazySettings
                )
                .SetTypicalOpen(GameRelease.SkyrimSE, "High Poly Head Synthesis Patcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            state.LoadOrder.TryGetIfEnabledAndExists(HPHModKey, out var hphMod);
            if (hphMod is null)
            {
                throw new Exception("High Poly Head.esm not found. Please install and/or enable it, then run the patch again.");
            }

            Console.WriteLine("High Poly Head found. Running patch...");
            Console.WriteLine();

            var vanillaHeadParts = GetVanillaHeadparts(state);
            var vanillaHphHeadpartDictionary = CreateHeadpartDictionary(hphMod, vanillaHeadParts);

            List<INpcGetter> npcsWithVanillaHeadparts = GetNpcsWithVanillaHeadparts(state, vanillaHeadParts);

            var hphHeads = hphMod.HeadParts
                .Where(hdpt => hdpt.Type == HeadPart.TypeEnum.Face)
                .ToList();

            foreach (var npcWithVanillaHeadparts in npcsWithVanillaHeadparts)
            {
                npcWithVanillaHeadparts.Race.TryResolve(state.LinkCache, out var npcRace);
                var isChild = npcRace?.EditorID!.Contains("Child") ?? false;
                if (isChild) continue;

                var npcWithHphHeadparts = state.PatchMod.Npcs.GetOrAddAsOverride(npcWithVanillaHeadparts);
                var hasHphHead = false;

                // Straight swap
                foreach (var headpart in vanillaHphHeadpartDictionary)
                {
                    var vanillaHeadPart = headpart.Key;
                    var hphHeadPart = headpart.Value;

                    if (npcWithHphHeadparts.HeadParts
                        .Select(hdpt => hdpt.FormKey).ToList()
                        .Contains(vanillaHeadPart.FormKey))
                    {
                        npcWithHphHeadparts.HeadParts.Add(hphHeadPart);
                        npcWithHphHeadparts.HeadParts.RemoveWhere(hdpt => hdpt.FormKey == vanillaHeadPart.FormKey);
                        vanillaHeadPart.TryResolve(state.LinkCache, out var vanillaHeadpartBase);
                        hphHeadPart.TryResolve(state.LinkCache, out var hphHeadPartBase);
                        if (hphHeadPartBase?.Type == HeadPart.TypeEnum.Face)
                        {
                            hasHphHead = true;
                        }
                        Console.WriteLine(vanillaHeadpartBase?.EditorID + " swapped out for " + hphHeadPartBase?.EditorID + " on " + (npcWithHphHeadparts.Name ?? npcWithHphHeadparts.EditorID) + ".");
                    }
                }

                if (hasHphHead)
                {
                    Console.WriteLine();
                    continue;
                }

                // Adding new head where needed
                var isFemale = npcWithHphHeadparts.Configuration.Flags.HasFlagFast(NpcConfiguration.Flag.Female);
                var isVampire = npcRace?.EditorID!.Contains("Vampire") ?? false;

                try
                {
                    foreach (var hphHead in hphHeads)
                    {
                        hphHead.ValidRaces.TryResolve(state.LinkCache, out var validRacesFormList);

                        if (validRacesFormList is null) continue;
                        if (!validRacesFormList.Items.Any(item => item.FormKey.Equals(npcRace?.FormKey))) continue;
                        if (isFemale && !hphHead.Flags.HasFlagFast(HeadPart.Flag.Female)) continue;
                        if (isVampire && !hphHead.EditorID!.Contains("Vampire")) continue;

                        npcWithHphHeadparts.HeadParts.Add(hphHead);
                        Console.WriteLine(hphHead.EditorID + " added to " + (npcWithHphHeadparts.Name ?? npcWithHphHeadparts.EditorID) + ".");
                        Console.WriteLine();
                        break;
                    }
                }
                catch (Exception ex) 
                {
                    throw new Exception(ex.ToString());
                }
            }
            Console.WriteLine("Patching complete!");
        }

        private static IEnumerable<IHeadPartGetter> GetVanillaHeadparts(
            IPatcherState<ISkyrimMod, 
            ISkyrimModGetter> state)
        {
            List<IModListing<ISkyrimModGetter>> list = [state.LoadOrder["Skyrim.esm"], state.LoadOrder["Dawnguard.esm"]];
            return list.WinningOverrides<IHeadPartGetter>();
        }

        private static Dictionary<IFormLinkGetter<IHeadPartGetter>, IFormLinkGetter<IHeadPartGetter>> CreateHeadpartDictionary(
            ISkyrimModGetter hphMod,
            IEnumerable<IHeadPartGetter> vanillaHeadparts)
        {
            var vanillaHphHeadpartDictionary = new Dictionary<IFormLinkGetter<IHeadPartGetter>, IFormLinkGetter<IHeadPartGetter>>();

            foreach (var hphHeadPart in hphMod.HeadParts)
            {
                var vanillaHeadpart = vanillaHeadparts.FirstOrDefault(hdpt => hdpt.EditorID == hphHeadPart.EditorID!.Replace(HPHHeadpartPrefix, ""));

                if (vanillaHeadpart is null) continue;

                vanillaHphHeadpartDictionary[vanillaHeadpart.ToLinkGetter()] = hphHeadPart.ToLinkGetter();
            }

            return vanillaHphHeadpartDictionary;
        }

        private static List<INpcGetter> GetNpcsWithVanillaHeadparts(
            IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            IEnumerable<IHeadPartGetter> vanillaHeadparts)
        {
            var vanillaHeadpartFormLinks = vanillaHeadparts.Select(hdpt => hdpt.FormKey.ToLinkGetter<IHeadPartGetter>());

            var modlist = Settings.PluginList.Count == 0 ?
                state.LoadOrder.PriorityOrder :
                state.LoadOrder.PriorityOrder.Where(listing => Settings.PluginList.Contains(listing.ModKey)).ToList();

            return modlist
                .OnlyEnabled()
                .WinningOverrides<INpcGetter>()
                .Where(npc => vanillaHeadpartFormLinks.Intersect(npc.HeadParts).Any())
                .ToList();
        }
    }
}
